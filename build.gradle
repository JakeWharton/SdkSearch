buildscript {
  ext.buildConfig = [
      'compileSdk': 27,
      'minSdk': 23,
      'targetSdk': 27,
  ]

  ext.versions = [
      'supportLibrary': '27.0.2',
      'kotlin': '1.2.20-eap-71',
      'kotlinCoroutines': '0.21.2',
      'kotlinSerialization': '0.4',
      'okhttp': '3.9.1',
      'retrofit': '2.3.0',
      'kotshi': '0.3.0',
      'dagger': '2.14.1',
  ]

  ext.deps = [
      'kotlin': [
          'stdlib': [
              'common': "org.jetbrains.kotlin:kotlin-stdlib-common:${versions.kotlin}",
              'jdk': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",
              'js': "org.jetbrains.kotlin:kotlin-stdlib-js:${versions.kotlin}",
          ],
          'test': [
              'common': "org.jetbrains.kotlin:kotlin-test-common:${versions.kotlin}",
              'annotations': "org.jetbrains.kotlin:kotlin-test-annotations-common:${versions.kotlin}",
              'jdk': "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}",
              'js': "org.jetbrains.kotlin:kotlin-test-js:${versions.kotlin}",
          ],
          'coroutines': [
              'common': "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${versions.kotlinCoroutines}",
              'jdk': "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}",
              'js': "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:${versions.kotlinCoroutines}",
              'android': "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinCoroutines}",
          ],
          'serialization': [
              'common': "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:${versions.kotlinSerialization}",
              'jdk': "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${versions.kotlinSerialization}",
              'js': "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:${versions.kotlinSerialization}",
          ],
      ],
      'android': [
          'arch': [
              'dbFramework': 'android.arch.persistence:db-framework:1.0.0',
          ],
          'support': [
              'annotations': "com.android.support:support-annotations:${versions.supportLibrary}",
              'coreUtils': "com.android.support:support-core-utils:${versions.supportLibrary}",
              'recyclerView': "com.android.support:recyclerview-v7:${versions.supportLibrary}",
              'customTabs': "com.android.support:customtabs:${versions.supportLibrary}",
              'design': "com.android.support:design:${versions.supportLibrary}",
              'constraintLayout': 'com.android.support.constraint:constraint-layout:1.1.0-beta4',
          ],
      ],
      'okhttp': [
          'client': "com.squareup.okhttp3:okhttp:${versions.okhttp}",
          'logging': "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}",
          'mockWebServer': "com.squareup.okhttp3:mockwebserver:${versions.okhttp}",
      ],
      'retrofit': [
          'client': "com.squareup.retrofit2:retrofit:${versions.retrofit}",
          'adapterKotlinCoroutines': 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-experimental-adapter:1.0.0',
          'converterKotlinxSerialization': 'com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.0.1',
          'converterMoshi': "com.squareup.retrofit2:converter-moshi:${versions.retrofit}",
      ],
      'rx': [
          'java': 'io.reactivex.rxjava2:rxjava:2.1.8',
          'android': 'io.reactivex.rxjava2:rxandroid:2.0.1',
          'binding': [
              'framework': 'com.jakewharton.rxbinding2:rxbinding-kotlin:2.0.0',
          ],
      ],
      'kotshi': [
          'api': "se.ansman.kotshi:api:${versions.kotshi}",
          'compiler': "se.ansman.kotshi:compiler:${versions.kotshi}",
      ],
      'dagger': [
          'runtime': "com.google.dagger:dagger:${versions.dagger}",
          'compiler': "com.google.dagger:dagger-compiler:${versions.dagger}",
      ],
      'auto': [
          'value': [
              'annotations': 'com.jakewharton.auto.value:auto-value-annotations:1.5',
              'compiler': 'com.google.auto.value:auto-value:1.5.2',
          ],
      ],
      'okio': 'com.squareup.okio:okio:1.13.0',
      'moshi': 'com.squareup.moshi:moshi:1.5.0',
      'timber': 'com.jakewharton.timber:timber:4.6.0',
      'junit': 'junit:junit:4.12',
      'truth': 'com.google.truth:truth:0.37',
      'sqlBrite': 'com.squareup.sqlbrite3:sqlbrite-kotlin:3.1.0',
      'bugsnag': 'com.bugsnag:bugsnag-android:4.2.2',
  ]

  ext.isCiBuild = System.getenv('CI') == 'true'

  repositories {
    jcenter()
    google()
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.1.0-alpha08'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
    classpath "org.jetbrains.kotlinx:kotlinx-gradle-serialization-plugin:${versions.kotlinSerialization}"
    classpath 'com.squareup.sqldelight:gradle-plugin:0.7.0-SNAPSHOT'
    classpath 'com.eriwen:gradle-js-plugin:1.12.1'
    classpath 'com.github.triplet.gradle:play-publisher:1.2.0'
  }
}

allprojects {
  repositories {
    jcenter()
    google()
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
  }

  // Force all of the primary support libraries to use the same version.
  configurations.all {
    resolutionStrategy {
      eachDependency { details ->
        if (details.requested.group == 'com.android.support') {
          details.useVersion versions.supportLibrary
        }
      }
    }
  }
}

def gitSha() {
  def f = new File(buildDir, "commit-sha.txt")
  if (!f.exists()) {
    def p = 'git rev-parse HEAD'.execute([], project.rootDir)
    if (p.waitFor() != 0) {
      throw new RuntimeException(p.errorStream.text)
    }
    f.parentFile.mkdirs()
    f.text = p.text.trim()
  }
  return f.text.trim()
}

def gitTimestamp() {
  def f = new File(buildDir, "commit-timestamp.txt")
  if (!f.exists()) {
    def p = 'git log -n 1 --format=%at'.execute([], rootDir)
    if (p.waitFor() != 0) {
      throw new RuntimeException(p.errorStream.text)
    }
    f.parentFile.mkdirs()
    f.text = p.text.trim()
  }
  return f.text.trim()
}

def propOrEmpty(String name) {
  return hasProperty(name) ? getProperty(name) : ''
}
